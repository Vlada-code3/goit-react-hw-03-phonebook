{"version":3,"sources":["components/contactsForm/ContactsFormStyled.js","components/contactsForm/ContactsForm.js","components/contactsList/StyledContactList.js","components/contactsList/ContactsList.js","components/section/SectionStyled.js","components/section/Section.js","components/filter/ContactFilterStyled.js","components/filter/ContactsFilter.js","components/Contacts.js","components/App.js","index.js"],"names":["ContactsLabel","styled","label","ContactsForm","state","name","number","onHandleSubmit","e","preventDefault","props","checkDublicateName","alert","addContact","setState","onHandleChange","target","value","onSubmit","this","type","onChange","pattern","title","required","Component","StyledContactList","div","ContactsList","contacts","onDeleteContact","className","map","contact","onClick","id","StyledSection","Section","children","style","StyledContactFilter","ContactsFilter","filter","setFilter","Contacts","a","axios","post","data","prevState","console","log","delete","some","getFilteredClients","toLowerCase","includes","toLocaleLowerCase","get","Object","keys","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f50eb69d.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const ContactsLabel = styled.label`\n\n width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n margin-bottom: 50px;\n\n\n`","import React, { Component } from 'react';\nimport { ContactsLabel} from './ContactsFormStyled'\nimport { v4 as uuid } from 'uuid';\n\n\nimport PropTypes from 'prop-types';\nclass ContactsForm extends Component {\n    // static propTypes = {\n    //     handleAdd: PropTypes.func.isRequired\n    // };\n    state = {\n      \n        name: \"\",\n        number: \"\",\n        \n        \n    }\n    \n\n    onHandleSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.checkDublicateName(this.state.name)) {\n            alert(`${this.state.name} already exist`)\n            return\n        } \n       \n        this.props.addContact(this.state )\n        \n        \n        this.setState({\n           \n            name: \"\",\n            number:\"\",\n\n\n        })\n   \n    };\n    onHandleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({ [name]: value }); //___v [name] prihodit name i price\n    }\n\n\n    render() {\n        return (\n            \n            <form onSubmit={this.onHandleSubmit}>\n\n                <ContactsLabel >\n                    Name\n                      <input\n                        type=\"text\"\n                        onChange={this.onHandleChange}\n                        value={this.state.name}\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </ContactsLabel>\n                <ContactsLabel>\n                    Number\n                      <input\n                        type=\"tel\"\n                        onChange={this.onHandleChange}\n                        value={this.state.number}\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                    />\n                </ContactsLabel>\n                <button type=\"submit\" >Add Contact</button>\n            </form>\n            \n               \n        );\n    }\n}\n\nContactsForm.propTypes = {\n    onHandleSubmit: PropTypes.func,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}.isRequired;\n\nexport default ContactsForm;","import styled from 'styled-components'\n\nexport const StyledContactList = styled.div`\n\n    width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n\n`","import React from 'react'\nimport PropTypes from 'prop-types';\nimport Contacts from '../Contacts';\nimport { StyledContactList } from './StyledContactList' ;\n\nconst ContactsList = ({contacts, onDeleteContact}) => {\n\n    return (\n        <StyledContactList>\n        <div className=\"card\">\n            \n            <ul className=\"contactItem\">\n                \n                {contacts.map(contact => (\n                    \n                    <li key= {contact.id } >\n                        <p>{contact.name}</p>\n                        <p>{contact.number}</p>\n                        <button type=\"button\" onClick={onDeleteContact} id={contact.id}>\n                            Delete</button>\n                    </li>\n                ))}\n            \n                \n            </ul>\n            </div>\n        </StyledContactList>\n    );\n}\n\nContactsList.propTypes = {\n    onDeleteContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })),\n}\nexport default ContactsList;\n","import styled from 'styled-components'\n\nexport const StyledSection = styled.div`\n\nborder: 1px solid black;\npadding:10px;\nh2{\n    color: red;\n}\n\n`\n","import React from 'react'\nimport { StyledSection } from './SectionStyled';\n\nconst Section = ({title, children, style}) => {\n    return (\n        \n        <StyledSection >\n            <h2>{title}</h2>\n            {children}\n            \n        </StyledSection>\n    );\n}\n\nexport default Section;","import styled from 'styled-components'\n\nexport const StyledContactFilter = styled.div`\n width:400px;\n\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n    \n    input {\n    width: 60%;\n  padding: 12px 10px;\n margin-left: 10px;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n\n\n}\n    `","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { StyledContactFilter } from './ContactFilterStyled';\n\n\nconst ContactsFilter = ({ filter, setFilter }) => {\n    return (\n        <StyledContactFilter>\n        <label >Filter:\n            <input type=\"text\"\n                value={filter}\n                onChange={setFilter}\n            />\n            </label>\n        </StyledContactFilter>\n    );\n}\n\nContactsFilter.propTypes = {\n    filter: PropTypes.string,\n    setFilter: PropTypes.func,\n}.isRequired;\nexport default ContactsFilter;","import React, { Component } from 'react';\nimport ContactsForm from './contactsForm/ContactsForm';\nimport ContactsList from './contactsList/ContactsList';\n// import { v4 as uuid } from 'uuid';\nimport Section from './section/Section';\n\nimport ContactsFilter from './filter/ContactsFilter';\nimport axios from 'axios';\n\n\n\n\nclass Contacts extends Component {\n    state = {\n        filter: '',\n        name: '',\n        number: '',\n        contacts: [\n           \n        ],\n        \n    };\n\n\n    async componentDidMount() {\n    \n        try {\n            const { data } = await axios.get(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts.json`)\n       \n            if (data) {\n                const contacts = Object.keys(data).map(key =>\n                    ({ id: key, ...data[key] }))\n                this.setState({contacts})\n            \n       }\n\n            console.log(data);\n            \n        } catch (error) {\n            \n        }\n}\n\n\n\n    addContact = async (contact) => {\ntry {\n    \n    const { data } = await axios.post(\n        `https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts.json`,\n        contact);\n    this.setState((prevState) => ({\n        \n            contacts: [...prevState.contacts, { ...contact, id: data.name }]\n        }));\n    console.log(data);\n} catch (error) {\n    \n}\n   \n    }\n    \n\n    onDeleteContact = async (e) => {\n\n        try {\n            const { id } = e.target\n            const { data } = await axios.delete(\n                `https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts/${id}.json`\n\n            );\n            this.setState({\n                contacts: this.state.contacts.filter(contact => contact.id !== id)\n            })\n        } catch (error) {\n            \n        }\n       \n        \n    }\n\n\n    checkDublicateName = (name) => {\n    \n\n       return this.state.contacts.some((contact) => contact.name === name);\n\n        \n\n    };\n\n\n  \n\n    setFilter = (e) => {\n        const { value } = e.target\n        this.setState({\n            filter: value\n        })\n    };\n\n    getFilteredClients = () => {\n        return this.state.contacts.filter(contact => contact.name.toLowerCase().includes(this.state.filter.toLocaleLowerCase()))\n    }\n    render() {\n        return (\n            \n            <>\n                <Section title=\"Phonebook\">\n                    \n                   \n                    <ContactsForm addContact={this.addContact} checkDublicateName={this.checkDublicateName} />\n                    \n                </Section>\n                \n                <Section title=\"Find contact by name\">\n                    <ContactsFilter filter={this.state.filter} setFilter={this.setFilter} />\n                </Section>\n                    \n                <Section title=\"Contacts\">\n                    <ContactsList contacts={this.state.contacts} onDeleteContact={this.onDeleteContact} contacts={this.getFilteredClients()}/>\n                </Section>\n               \n\n                </>\n\n        );\n    }\n}\n\nexport default Contacts;","import React from 'react'\nimport Contacts from './Contacts'\n\nconst App = () => {\n    return (\n        <>\n            <Contacts/>\n            </>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <App />\n ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}